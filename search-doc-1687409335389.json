[{"title":"AngleSpring","type":0,"sectionRef":"#","url":"/Dec/api/AngleSpring","content":"On this page AngleSpring Observable Inherits Observable Observable object which simulates critically damped spring motion in realtime while subscribed, clamping values to the range [-pi, pi]. Can be constructed via Dec.AngleSpring","keywords":""},{"title":"Alpha","type":0,"sectionRef":"#","url":"/Dec/api/Alpha","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Alpha","url":"/Dec/api/Alpha#functions","content":" "},{"title":"Slice​","type":1,"pageTitle":"Alpha","url":"/Dec/api/Alpha#Slice","content":"&lt;/&gt; Alpha:Slice( startAlpha: number, endAlpha: number ) → Alpha Creates a slice of the current Alpha Observable that starts at startAlpha (maps to 0) and ends at endAlpha (maps to 1). Useful for slicing up animation sequences into smaller slices.  "},{"title":"Curve​","type":1,"pageTitle":"Alpha","url":"/Dec/api/Alpha#Curve","content":"&lt;/&gt; Alpha:Curve( easingStyle: Enum.EasingStyle?, easingDirection: Enum.EasingDirection? ) → Alpha Creates a new Alpha Observable that interpolates between 0 and 1 using the given easing style and direction. Useful for creating non-linear animations.  "},{"title":"Invert​","type":1,"pageTitle":"Alpha","url":"/Dec/api/Alpha#Invert","content":"&lt;/&gt; Alpha:Invert() → Alpha Creates a new Alpha Observable that maps 0 to 1 and 1 to 0 from the original Observable. Useful for reversing animations, output values, etc.  "},{"title":"Lerp​","type":1,"pageTitle":"Alpha","url":"/Dec/api/Alpha#Lerp","content":"&lt;/&gt; Alpha:Lerp( startValue: T, goalValue: T ) → Observable&lt;T&gt;-ThelerpedObservable. Creates a new Observable that outputs an interpolated value between the start value and goal value based on the current Alpha value. "},{"title":"Dict","type":0,"sectionRef":"#","url":"/Dec/api/Dict","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Dict","url":"/Dec/api/Dict#functions","content":" "},{"title":"Set​","type":1,"pageTitle":"Dict","url":"/Dec/api/Dict#Set","content":"&lt;/&gt; Dict:Set( key: K, value: V ) → () Sets the value at a specific key. "},{"title":"Eased","type":0,"sectionRef":"#","url":"/Dec/api/Eased","content":"On this page Eased Observable Inherits Observable Observable object which eases in realtime using tween motion, towards an input observaable's value, restarting the tween every time that value changes. Can be constructed via Dec.Eased","keywords":""},{"title":"IntSpring","type":0,"sectionRef":"#","url":"/Dec/api/IntSpring","content":"On this page IntSpring Observable Inherits Observable Observable object which simulates critically damped spring motion in realtime while subscribed, rounding towards the nearest integer to the goal value. Can be constructed via Dec.IntSpring","keywords":""},{"title":"Dec","type":0,"sectionRef":"#","url":"/Dec/api/Dec","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#types","content":" "},{"title":"CanBeObservable<T>​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#CanBeObservable<T>","content":"&lt;/&gt; type CanBeObservable&lt;T&gt; = Observable&lt;T&gt; | T Utility type that denotes a value can be an observable. Dec provides the utility function Dec.CoerceAsObservable for unwrapping these objects. "},{"title":"Properties​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#properties","content":" "},{"title":"Nil​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#Nil","content":"&lt;/&gt; Dec.Nil: Symbol&lt;&quot;Nil&quot;&gt; Symbol that represents a &quot;Nil&quot; value. Because &quot;nil&quot; values can't be represented as values of a Luau table, Dec.Nil can be used in its place. Example usage: Dec.New(&quot;BillboardGui&quot;, { Adornee = Dec.Map(props.adornee)(function(adorneeCurrent: Instance?) return adorneeCurrent or Dec.Nil end), })  "},{"title":"Functions​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#functions","content":" "},{"title":"New​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#New","content":"&lt;/&gt; Dec.New( className: string, props: {[string]: any}?, children: {[any]: CanBeObservable&lt;VirtualInstance?&gt;} ) → VirtualInstance Creates a new VirtualInstance that represents a newly-created Roblox Instance (via Instance.new(className)).  "},{"title":"Clone​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#Clone","content":"&lt;/&gt; Dec.Clone( template: Instance , props: {[string]: any}?, children: {[any]: CanBeObservable&lt;VirtualInstance?&gt;} ) → VirtualInstance Creates a new VirtualInstance that represents a cloned Roblox Instance from a given template instance (via template:Clone()).  "},{"title":"Premade​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#Premade","content":"&lt;/&gt; Dec.Premade( props: {[string]: any}?, children: Dec.ChildMap? ) → VirtualInstance Creates a new VirtualInstance that represents a pre-existing Roblox Instance to be decorated. This will modify the properties of an existing instance rather than creating or destroying new instanvces. The instance modified will either be the one that is passed into Dec.CreateRoot(), or a child of an existing virtual instance that Dec will automatically wait for (specified viavirtualInstance:Child(path, Dec.Premade( . . . )) ).  "},{"title":"Root​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#Root","content":"&lt;/&gt; Dec.Root(instance: Instance ) → Root Creates a new Root instance. The Root is a reference to a real Roblox Instance and is used to reconcile Virtual Instances.  "},{"title":"CoerceAsObservable​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#CoerceAsObservable","content":"&lt;/&gt; Dec.CoerceAsObservable(value: CanBeObservable&lt;T&gt;) → Observable&lt;T&gt; This function coerces the passed in value to an Observable. Useful for unwrapped the CanBeObservable type in a component's props.  "},{"title":"Map​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#Map","content":"&lt;/&gt; Dec.Map(...: Observable&lt;...T&gt;) → ((map: ...T) → ReturnType) → Observable&lt;ReturnType&gt; Returns a curryable mapping function, which in turn returns a derived observable from the dependent observables passed in. Example usage: local x = Dec.State(2) local y = Dec.State(3) local sum = Dec.Map(x, y)(function(currentX, currentY) return currentX + currentY end)  "},{"title":"State​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#State","content":"&lt;/&gt; Dec.State(initialValue: T) → State&lt;T&gt; Creates a new State Observable object with the given initial value.  "},{"title":"Spring​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#Spring","content":"&lt;/&gt; Dec.Spring( target: Observable&lt;T&gt;, angularFrequency: number? ) → Observable&lt;T&gt; Creates an easing observable that simulates the behavior of a critically damped spring. The spring simulates in realtime until the target value is reached. NOTE: Spring must have at lease one Subscriber (or be mounted on at least one VirtualInstance) to simulate properly! Observables automatically garbage collect once the object is dereferenced and all subscribers are disconnected (and VirtualInstances unmounted)  "},{"title":"Eased​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#Eased","content":"&lt;/&gt; Dec.Eased( target: Observable&lt;T&gt;, info: TweenInfo ) → Observable&lt;T&gt; Creates an Observable that eases in realtime every time the input Observable changes its value, based on the TweenInfo provided. caution Eased must have at least one Subscriber (or be mounted on at least one VirtualInstance) to simulate in realtime!  "},{"title":"Dict​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#Dict","content":"&lt;/&gt; Dec.Dict(initialValue:: {[K]: V}) → Dict&lt;T&gt; Creates a new Dict state observable with the given initial value.  "},{"title":"Alpha​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#Alpha","content":"&lt;/&gt; Dec.Alpha( source: Observable&lt;number&gt;, sourceRangeMin: number, sourceRangeMax: number ) → Alpha Creates a new Alpha Observable object, which maps the current value of the source observable to the range [0, 1] based on sourceRangeMin and sourceRangeMax  "},{"title":"IntSpring​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#IntSpring","content":"&lt;/&gt; Dec.IntSpring( target: Observable&lt;T&gt;, angularFrequency: number ) → Observable&lt;T&gt; Creates an easing observable that simulates the behavior of a critically damped spring, constrained to the Integer range. Rounds the current position towards the target value, useful for elements like counters. caution Springs must have at least one Subscriber (or be mounted on at least one VirtualInstance) to simulate in realtime!  "},{"title":"AngleSpring​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#AngleSpring","content":"&lt;/&gt; Dec.AngleSpring( target: Observable&lt;T&gt;, angularFrequency: number? ) → Observable&lt;T&gt; Creates an easing observable that simulates the behavior of a critically damped spring, wrapped around the range [-pi, pi]. The spring simulates in realtime until the target value is reached. caution AngleSpring must have at least one Subscriber (or be mounted on at least one VirtualInstance) to simulate in realtime!  "},{"title":"CustomObservable​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#CustomObservable","content":"&lt;/&gt; Dec.CustomObservable( getCurrent: () → T, createUpdateStream: (notifyChange: () → ()) → (() → ()) ) → Observable&lt;T&gt; Creates a new Dec Observable object. Observables are used to hold, derive, or map state within a Dec application. The first parameter should be a function that always returns the current state of the observable whenever called. The second parameter is a function which sets up resources to notify its first paramter whenever the current state changes, then returns a &quot;cleanup&quot; function which takes down these resources when the observable is no longer subscribed or mounted. warning Make sure the createUpdateStream parameter correctly matches type, and returns a &quot;cleanup&quot; function which fully cleans up all listeners or resources. Observables garbage collect ONLY when all subscribers are unsubscribed, and all VirtualInstances using them are unmounted.  "},{"title":"IsStateRecord​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#IsStateRecord","content":"&lt;/&gt; Dec.IsStateRecord(passedIn: unknown) → boolean This function checks if the passed in value is a Dec.StateRecord observable object  "},{"title":"IsVirtualInstance​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#IsVirtualInstance","content":"&lt;/&gt; Dec.IsVirtualInstance(passedIn: unknown) → boolean This function checks if the passed in value is a Dec VirtualInstance  "},{"title":"IsState​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#IsState","content":"&lt;/&gt; Dec.IsState(passedIn: unknown) → boolean This function checks if the passed in value is a Dec.State observable object  "},{"title":"IsObservable​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#IsObservable","content":"&lt;/&gt; Dec.IsObservable(passedIn: unknown) → boolean This function checks if the passed in value is an Observable.  "},{"title":"GetVirtualInstanceType​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#GetVirtualInstanceType","content":"&lt;/&gt; Dec.GetVirtualInstanceType(passedIn: VirtualInstance) → &quot;New&quot; | &quot;Clone&quot; | &quot;Premade&quot; This function returns the constructor type for VirtualInstance (&quot;New&quot;, &quot;Clone&quot;, or &quot;Premade&quot;). Errors if the passed in value is not a VirtualInstance.  "},{"title":"ObserveFusionState​","type":1,"pageTitle":"Dec","url":"/Dec/api/Dec#ObserveFusionState","content":"&lt;/&gt; Dec.ObserveFusionState( Fusion: any, fusionStateObject: Fusion.StateObject&lt;T&gt; ) → Observable&lt;T&gt; Interoperability function that maps a Fusion StateObject to a Dec Observable object. The returned observable is garbage collected once dereferenced and unsubscribed/unmounted. The Fusion library must be provided, as Fusion StateObjects only work when embedded in a Fusion runtime. "},{"title":"Observable","type":0,"sectionRef":"#","url":"/Dec/api/Observable","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Observable","url":"/Dec/api/Observable#functions","content":" "},{"title":"Current​","type":1,"pageTitle":"Observable","url":"/Dec/api/Observable#Current","content":"&lt;/&gt; Observable:Current() → T Returns the current value of the Observable.  "},{"title":"Map​","type":1,"pageTitle":"Observable","url":"/Dec/api/Observable#Map","content":"&lt;/&gt; Observable:Map(mappingFunction: (value: T) → any) → Observable&lt;any&gt; Creates a new Observable that emits the values from the original Observable mapped by the provided function.  "},{"title":"Subscribe​","type":1,"pageTitle":"Observable","url":"/Dec/api/Observable#Subscribe","content":"&lt;/&gt; Observable:Subscribe( listener: (value: T) → (), immediatelyCallListener: boolean? ) → () → () Subscribes to changes in the Observable. Returns a function that, when called, will unsubscribe the callback from the Observable updates. If true is provided as a second argument, will also call the callback once immediately with the current value. WARNING: Make sure you handle the Unsubscribe function whenever a calling Subscribe! Observables do not garbage collect until all external listeners are unsubscribed.  "},{"title":"Destroy​","type":1,"pageTitle":"Observable","url":"/Dec/api/Observable#Destroy","content":"&lt;/&gt; Observable:Destroy() → () Destroys the Observable, releasing all its resources and unsubscribing all listeners. "},{"title":"Record","type":0,"sectionRef":"#","url":"/Dec/api/Record","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Record","url":"/Dec/api/Record#functions","content":" "},{"title":"Set​","type":1,"pageTitle":"Record","url":"/Dec/api/Record#Set","content":"&lt;/&gt; Record:Set( key: string, value: any ) → () Sets the value at a specific key. "},{"title":"Root","type":0,"sectionRef":"#","url":"/Dec/api/Root","content":"On this page Root Root is an object which starts and stops rendering VirtualInstances passed into it. In order to write a Dec application, you need to create a root viaDec.Root, and render an instance using Root:Render()","keywords":""},{"title":"Spring","type":0,"sectionRef":"#","url":"/Dec/api/Spring","content":"On this page Spring Observable Inherits Observable Observable object which simulates critically damped spring motion in realtime while subscribed, moving towards an input observable's current value. Can be constructed via Dec.Spring","keywords":""},{"title":"State","type":0,"sectionRef":"#","url":"/Dec/api/State","content":"On this page State Observable Inherits Observable Observable object which holds a value that can be updated via State:Set(). Can be constructed via Dec.State","keywords":""},{"title":"Timer","type":0,"sectionRef":"#","url":"/Dec/api/Timer","content":"","keywords":""},{"title":"Stopwatch","type":0,"sectionRef":"#","url":"/Dec/api/Stopwatch","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Stopwatch","url":"/Dec/api/Stopwatch#functions","content":" "},{"title":"Start​","type":1,"pageTitle":"Stopwatch","url":"/Dec/api/Stopwatch#Start","content":"&lt;/&gt; Stopwatch:Start() → () Starts the Stopwatch Observable. The observable will update with new values every heartbeat in real-time until it is stopped.  "},{"title":"Stop​","type":1,"pageTitle":"Stopwatch","url":"/Dec/api/Stopwatch#Stop","content":"&lt;/&gt; Stopwatch:Stop() → () Stops the Stopwatch Observable.  "},{"title":"Pause​","type":1,"pageTitle":"Stopwatch","url":"/Dec/api/Stopwatch#Pause","content":"&lt;/&gt; Stopwatch:Pause() → () Pauses the Stopwatch Observable.  "},{"title":"Pause​","type":1,"pageTitle":"Stopwatch","url":"/Dec/api/Stopwatch#Pause","content":"&lt;/&gt; Stopwatch:Pause() → () Sets the current elapsed time of the Stopwatch.  "},{"title":"CurvedAlpha​","type":1,"pageTitle":"Stopwatch","url":"/Dec/api/Stopwatch#CurvedAlpha","content":"&lt;/&gt; Stopwatch:CurvedAlpha() → Alpha Creates a new Alpha Observable that interpolates between 0 and one using the given easing style and direction. Useful for creating non-linear animations.  "},{"title":"SliceAlpha​","type":1,"pageTitle":"Stopwatch","url":"/Dec/api/Stopwatch#SliceAlpha","content":"&lt;/&gt; Stopwatch:SliceAlpha() → Alpha Creates a new Alpha Observable that starts at startTime (maps to 0) and ends at endTime (maps to 1). Useful for slicing up animation sequences into smaller slices. "},{"title":"Functions​","type":1,"pageTitle":"Timer","url":"/Dec/api/Timer#functions","content":" "},{"title":"Start​","type":1,"pageTitle":"Timer","url":"/Dec/api/Timer#Start","content":"&lt;/&gt; Timer:Start() → () Starts the Timer Observable. The observable will update with new values every heartbeat in real-time until it is stopped.  "},{"title":"Stop​","type":1,"pageTitle":"Timer","url":"/Dec/api/Timer#Stop","content":"&lt;/&gt; Timer:Stop() → () Stops the Timer Observable.  "},{"title":"Pause​","type":1,"pageTitle":"Timer","url":"/Dec/api/Timer#Pause","content":"&lt;/&gt; Timer:Pause() → () Pauses the Timer Observable.  "},{"title":"Pause​","type":1,"pageTitle":"Timer","url":"/Dec/api/Timer#Pause","content":"&lt;/&gt; Timer:Pause() → () Sets the current remaining time of the Timer.  "},{"title":"CurvedAlpha​","type":1,"pageTitle":"Timer","url":"/Dec/api/Timer#CurvedAlpha","content":"&lt;/&gt; Timer:CurvedAlpha() → Alpha Creates a new Alpha Observable that interpolates between 0 and one using the given easing style and direction. Useful for creating non-linear animations.  "},{"title":"SliceAlpha​","type":1,"pageTitle":"Timer","url":"/Dec/api/Timer#SliceAlpha","content":"&lt;/&gt; Timer:SliceAlpha() → Alpha Creates a new Alpha Observable that starts at startTime (maps to 0) and ends at endTime (maps to 1). Useful for slicing up animation sequences into smaller slices. "},{"title":"Dec Introduction","type":0,"sectionRef":"#","url":"/Dec/docs/intro","content":"Dec Introduction caution Dec is currently in early development, and a stable first release has not been finished or tested..","keywords":""},{"title":"VirtualInstance","type":0,"sectionRef":"#","url":"/Dec/api/VirtualInstance","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"VirtualInstance","url":"/Dec/api/VirtualInstance#functions","content":" "},{"title":"SetProperties​","type":1,"pageTitle":"VirtualInstance","url":"/Dec/api/VirtualInstance#SetProperties","content":"&lt;/&gt; VirtualInstance:SetProperties(propertyMap: {[string]: CanBeObservable&lt;any&gt;}) → () Adds properties to be rendered on the instance when it is reconciled. Multiple calls to this function will merge the provided property map with the existing one, prioritizing the later call.  "},{"title":"SetAttributes​","type":1,"pageTitle":"VirtualInstance","url":"/Dec/api/VirtualInstance#SetAttributes","content":"&lt;/&gt; VirtualInstance:SetAttributes(attributeMap: {[string]: CanBeObservable&lt;any&gt;}) → () Adds attributes to be rendered on the instance when it is reconciled. Multiple calls to this function will merge the provided attribute map with the existing one, prioritizing the latest calls.  "},{"title":"AddTags​","type":1,"pageTitle":"VirtualInstance","url":"/Dec/api/VirtualInstance#AddTags","content":"&lt;/&gt; VirtualInstance:AddTags(tags: CanBeObservable&lt;{string}&gt;) → () Adds tags to the Virtual Instance when it is reconciled. Multiple calls to this function will add extra tags to the VirtualInstance if they do not exist.  "},{"title":"Connect​","type":1,"pageTitle":"VirtualInstance","url":"/Dec/api/VirtualInstance#Connect","content":"&lt;/&gt; VirtualInstance:Connect( eventName: string, listener: (...any) → () ) → () Adds an event listener to the Virtual Instance, which will automatically be connected and disconnected as the VirtualInstance is reconciled.  "},{"title":"OutProperty​","type":1,"pageTitle":"VirtualInstance","url":"/Dec/api/VirtualInstance#OutProperty","content":"&lt;/&gt; VirtualInstance:OutProperty( propName: string, initialValue: T ) → Observable&lt;T&gt; Creates an Observable object that updates to the current value of an property on the virtual instance once when it is mounted, and listens to updates on this property. Give initialValue a type annotation if initializing to nil (e.g. vInst:OutProperty(&quot;Adornee&quot;, nil :: Instance?)()  "},{"title":"OutInitialProperty​","type":1,"pageTitle":"VirtualInstance","url":"/Dec/api/VirtualInstance#OutInitialProperty","content":"&lt;/&gt; VirtualInstance:OutInitialProperty( propName: string, initialValue: T ) → Dec.Observable&lt;T&gt;-AnobservablewiththesameoutputtypeasinitialValue. Creates an Observable object that updates to the original value of an property on the virtual instance once when it is mounted. This is useful for referencing properties on a premade instance without hardcoding them in a Dec component. Give initialValue a type annotation if initializing to nil (e.g. vInst:OutInitialProperty(&quot;Adornee&quot;, nil :: Instance?))  "},{"title":"OutAttribute​","type":1,"pageTitle":"VirtualInstance","url":"/Dec/api/VirtualInstance#OutAttribute","content":"&lt;/&gt; VirtualInstance:OutAttribute( attributeName: string, initialValue: T ) → Observable&lt;T&gt; Creates an Observable object that updates to the current value of an attribute on the virtual instance once when it is mounted, and listens to updates on this attribute. Give initialValue a type annotation if initializing to nil (e.g. vInstance:OutAttribute(&quot;Foo&quot;, nil :: string?))  "},{"title":"OutInitialAttribute​","type":1,"pageTitle":"VirtualInstance","url":"/Dec/api/VirtualInstance#OutInitialAttribute","content":"&lt;/&gt; VirtualInstance:OutInitialAttribute( attributeName: string, initialValue: T ) → Observable&lt;T&gt; Creates an Observable object that updates to the original value of an attribute on the virtual instance once when it is mounted. This is useful for referencing attributes on a premade instance without hardcoding them in a Dec component. Give initialValue a type annotation if initializing to nil (e.g. vInst:OutInitialAttribute(&quot;Foo&quot;, nil :: string?))  "},{"title":"OutInstance​","type":1,"pageTitle":"VirtualInstance","url":"/Dec/api/VirtualInstance#OutInstance","content":"&lt;/&gt; VirtualInstance:OutInstance() → Observable&lt;Instance? &gt; Outputs a reference to the reconciled instance to a Dec State object.  "},{"title":"Copy​","type":1,"pageTitle":"VirtualInstance","url":"/Dec/api/VirtualInstance#Copy","content":"&lt;/&gt; VirtualInstance:Copy() → VirtualInstance Creates a shallow copy of the Virtual Instance.  "},{"title":"DeepCopy​","type":1,"pageTitle":"VirtualInstance","url":"/Dec/api/VirtualInstance#DeepCopy","content":"&lt;/&gt; VirtualInstance:DeepCopy() → VirtualInstance Creates a deep copy of the VirtualInstance and all child VirtualInstances.  "},{"title":"AddChild​","type":1,"pageTitle":"VirtualInstance","url":"/Dec/api/VirtualInstance#AddChild","content":"&lt;/&gt; VirtualInstance:AddChild( path: string | number | {string | number}, child: CanBeObservable&lt;Instance | VirtualInstance?&gt; ) → () Adds a child VirtualInstance node to this VirtualInstance. The path can be a dot-separated string, or an array of raw string names. If the child is an actual Instance, that instance will be reparanted to the virtual instance when reconciled, and destroyed when the VirtualInstances is unmounted. If the child is a VirtualInstance, it will be created or found depending on the type of VirtualInstance passed in.  "},{"title":"AddChildren​","type":1,"pageTitle":"VirtualInstance","url":"/Dec/api/VirtualInstance#AddChildren","content":"&lt;/&gt; VirtualInstance:AddChildren(childMap: CanBeObservable&lt;{[any]: CanBeObservable&lt;VirtualInstance?&gt;}&gt;) → () Adds multiple children to the VirtualInstance given a child map. See VirtualInstance:Child() for API reference  "},{"title":"OnMount​","type":1,"pageTitle":"VirtualInstance","url":"/Dec/api/VirtualInstance#OnMount","content":"&lt;/&gt; VirtualInstance:OnMount(callback: (instance: Instance ) → ()) → () Adds a lifecycle callback to be called when the Virtual Instance is mounted.  "},{"title":"OnUnmount​","type":1,"pageTitle":"VirtualInstance","url":"/Dec/api/VirtualInstance#OnUnmount","content":"&lt;/&gt; VirtualInstance:OnUnmount(callback: (instance: Instance ) → ()) → () Adds a lifecycle callback to be called when the Virtual Instance is unmounted.  "},{"title":"ExtractChildTemplate​","type":1,"pageTitle":"VirtualInstance","url":"/Dec/api/VirtualInstance#ExtractChildTemplate","content":"&lt;/&gt; VirtualInstance:ExtractChildTemplate(nameOrPredicate: string | {string}) → VirtualInstance Specifies that when the VirtualInstance is mounted, returns a new VirtualInstance which automatically mounts on the first child matching the name (or predicate) defined in the first argument to this method. Upon mount, all other children matching this name will be destroyed, and the template will be parented to nil by defalt. On unmount, it will be reparented to its original location if possible. Usage example: local function CardListUI() -- Define a VirtualInstance to be mounted on pre-existing UI in PlayerGui local rootUI = Dec.Premade() -- Index a ScrollingFrame containing template cards local cardList = rootUI:FindChild(&quot;ScrollingFrame&quot;) -- Extract the first template named &quot;CardTemplate&quot;, and destroy all other -- premade templates with that same name local cardTemplate = cardList:ExtractChildTemplate(&quot;CardTemplate&quot;) -- Generate 10 cards from the template local cards = {} for i = 1, 10 do table.insert(cards, Dec.Clone(cardTemplate, { LayoutOrder = i })) end return rootUI end   "},{"title":"FindChild​","type":1,"pageTitle":"VirtualInstance","url":"/Dec/api/VirtualInstance#FindChild","content":"&lt;/&gt; VirtualInstance:FindChild(childPath: string) → VirtualInstance Creates a new VirtualInstance that automatically mounts on the child of the parent VirtualInstance. Will wait until a child with the given name is found. The following blocks of code are equivalent: local parent = Dec.Premade() local child = Dec.Premade() parent:AddChild(&quot;ChildName&quot;, child) local parent = Dec.Premade() local child = parent:FindChild(&quot;ChildName&quot;)  "}]