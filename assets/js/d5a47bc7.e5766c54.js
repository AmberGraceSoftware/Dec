"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4364],{12517:e=>{e.exports=JSON.parse('{"functions":[{"name":"SetProperties","desc":"Adds properties to be rendered on the instance when it is reconciled.\\n\\nMultiple calls to this function will merge the provided property map with\\nthe existing one, prioritizing the later call.","params":[{"name":"propertyMap","desc":"","lua_type":"{[string]: CanBeObservable<any>}"}],"returns":[],"function_type":"method","source":{"line":88,"path":"src/VirtualInstance.luau"}},{"name":"SetAttributes","desc":"Adds attributes to be rendered on the instance when it is reconciled.\\n\\nMultiple calls to this function will merge the provided attribute map with\\nthe existing one, prioritizing the latest calls.","params":[{"name":"attributeMap","desc":"","lua_type":"{[string]: CanBeObservable<any>}"}],"returns":[],"function_type":"method","source":{"line":110,"path":"src/VirtualInstance.luau"}},{"name":"AddTags","desc":"Adds tags to the Virtual Instance when it is reconciled. Multiple calls to\\nthis function will add extra tags to the VirtualInstance if they do not\\nexist.","params":[{"name":"tags","desc":"","lua_type":"CanBeObservable<{string}>"}],"returns":[],"function_type":"method","source":{"line":131,"path":"src/VirtualInstance.luau"}},{"name":"Connect","desc":"Adds an event listener to the Virtual Instance, which will automatically\\nbe connected and disconnected as the VirtualInstance is reconciled.","params":[{"name":"eventName","desc":"","lua_type":"string"},{"name":"listener","desc":"","lua_type":"(...any) -> ()"}],"returns":[],"function_type":"method","source":{"line":152,"path":"src/VirtualInstance.luau"}},{"name":"OutProperty","desc":"Creates an Observable object that updates to the current value of an\\nproperty on the virtual instance once when it is mounted, and listens to\\nupdates on this property.\\n\\nGive initialValue a type annotation if initializing to nil\\n(e.g. vInst:OutProperty(\\"Adornee\\", nil :: Instance?)()","params":[{"name":"propName","desc":"","lua_type":"string"},{"name":"initialValue","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"Observable<T>"}],"function_type":"method","source":{"line":182,"path":"src/VirtualInstance.luau"}},{"name":"OutInitialProperty","desc":"Creates an Observable object that updates to the original value of an\\nproperty on the virtual instance once when it is mounted. This is useful\\nfor referencing properties on a premade instance without hardcoding them in\\na Dec component.\\n\\nGive initialValue a type annotation if initializing to nil\\n(e.g. vInst:OutInitialProperty(\\"Adornee\\", nil :: Instance?))","params":[{"name":"propName","desc":"","lua_type":"string"},{"name":"initialValue","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"Observable<T> - An observable with the same output type as initialValue."}],"function_type":"method","source":{"line":216,"path":"src/VirtualInstance.luau"}},{"name":"OutAttribute","desc":"Creates an Observable object that updates to the current value of an\\nattribute on the virtual instance once when it is mounted, and listens to\\nupdates on this attribute.\\n\\nGive initialValue a type annotation if initializing to nil\\n(e.g. vInstance:OutAttribute(\\"Foo\\", nil :: string?))","params":[{"name":"attributeName","desc":"","lua_type":"string"},{"name":"initialValue","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"Observable<T>"}],"function_type":"method","source":{"line":249,"path":"src/VirtualInstance.luau"}},{"name":"OutInitialAttribute","desc":"Creates an Observable object that updates to the original value of an\\nattribute on the virtual instance once when it is mounted. This is useful\\nfor referencing attributes on a premade instance without hardcoding them in\\na Dec component.\\n\\nGive initialValue a type annotation if initializing to nil\\n(e.g. vInst:OutInitialAttribute(\\"Foo\\", nil :: string?))","params":[{"name":"attributeName","desc":"","lua_type":"string"},{"name":"initialValue","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"Observable<T>"}],"function_type":"method","source":{"line":283,"path":"src/VirtualInstance.luau"}},{"name":"OutInstance","desc":"Outputs a reference to the reconciled instance to a Dec State object.","params":[],"returns":[{"desc":"","lua_type":"Observable<Instance?>"}],"function_type":"method","source":{"line":309,"path":"src/VirtualInstance.luau"}},{"name":"Copy","desc":"Creates a shallow copy of the Virtual Instance.","params":[],"returns":[{"desc":"","lua_type":"VirtualInstance"}],"function_type":"method","source":{"line":329,"path":"src/VirtualInstance.luau"}},{"name":"DeepCopy","desc":"Creates a deep copy of the VirtualInstance and all child VirtualInstances.","params":[],"returns":[{"desc":"","lua_type":"VirtualInstance"}],"function_type":"method","source":{"line":347,"path":"src/VirtualInstance.luau"}},{"name":"AddChild","desc":"Adds a child VirtualInstance node to this VirtualInstance.\\n\\nThe path can be a dot-separated string, or an array of raw string names.\\n\\nIf the child is an actual Instance, that instance will be reparanted to the\\nvirtual instance when reconciled, and destroyed when the VirtualInstances is\\nunmounted.\\n\\nIf the child is a VirtualInstance, it will be created or found depending on\\nthe type of VirtualInstance passed in.","params":[{"name":"path","desc":"","lua_type":"string | number | {string | number}"},{"name":"child","desc":"","lua_type":"CanBeObservable<Instance | VirtualInstance?>"}],"returns":[],"function_type":"method","source":{"line":381,"path":"src/VirtualInstance.luau"}},{"name":"AddChildren","desc":"Adds multiple children to the VirtualInstance given a child map. See\\nVirtualInstance:Child() for API reference","params":[{"name":"childMap","desc":"","lua_type":"CanBeObservable<{[any]: CanBeObservable<VirtualInstance?>}>"}],"returns":[],"function_type":"method","source":{"line":403,"path":"src/VirtualInstance.luau"}},{"name":"OnMount","desc":"Adds a lifecycle callback to be called when the Virtual Instance is mounted.","params":[{"name":"callback","desc":"","lua_type":"(instance: Instance) -> ()"}],"returns":[],"function_type":"method","source":{"line":422,"path":"src/VirtualInstance.luau"}},{"name":"OnUnmount","desc":"Adds a lifecycle callback to be called when the Virtual Instance is\\nunmounted.","params":[{"name":"callback","desc":"","lua_type":"(instance: Instance) -> ()"}],"returns":[],"function_type":"method","source":{"line":442,"path":"src/VirtualInstance.luau"}},{"name":"ExtractChildTemplate","desc":"Specifies that when the VirtualInstance is mounted, returns a new\\nVirtualInstance which automatically mounts on the first child matching\\nthe name (or predicate) defined in the first argument to this method.\\n\\nUpon mount, all other children matching this name will be destroyed,\\nand the template will be parented to `nil` by defalt. On unmount, it will be\\nreparented to its original location if possible.\\n\\nUsage example:\\n\\n```lua\\nlocal function CardListUI()\\n    -- Define a VirtualInstance to be mounted on pre-existing UI in PlayerGui\\n    local rootUI = Dec.Premade(\\"ScreenGui\\")\\n\\n    -- Index a ScrollingFrame containing template cards\\n    local cardList = rootUI:FindChild(\\"ScrollingFrame\\", \\"CardList\\")\\n\\n    -- Extract the first template named \\"CardTemplate\\", and destroy all other\\n    -- premade templates with that same name\\n    local cardTemplate = cardList:ExtractChildTemplate(\\"CardTemplate\\")\\n\\n    -- Generate 10 cards from the template\\n    local cards = {}\\n    for i = 1, 10 do\\n        table.insert(cards, Dec.Clone(cardTemplate, {\\n            LayoutOrder = i\\n        }))\\n    end\\n\\n    return rootUI\\nend\\n```","params":[{"name":"nameOrPredicate","desc":"","lua_type":"string | {string}"}],"returns":[{"desc":"","lua_type":"VirtualInstance"}],"function_type":"method","source":{"line":493,"path":"src/VirtualInstance.luau"}},{"name":"FindChild","desc":"Creates a new VirtualInstance that automatically mounts on the child of the\\nparent VirtualInstance. Will wait until a child with the given name is\\nfound.\\n\\nThe following blocks of code are equivalent:\\n```lua\\nlocal parent = Dec.Premade(\\"Frame\\")\\nlocal child = Dec.Premade(\\"Frame\\")\\nparent:AddChild(\\"ChildName\\", child)\\n```\\n\\n```lua\\nlocal parent = Dec.Premade(\\"Frame\\")\\nlocal child = parent:FindChild(\\"ChildName\\")\\n```","params":[{"name":"childPath","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"VirtualInstance"}],"function_type":"method","source":{"line":535,"path":"src/VirtualInstance.luau"}}],"properties":[],"types":[],"name":"VirtualInstance","desc":"VirtualInstances are the basic building blocks for Dec applications.\\n\\nVirtualInstances are \\"Mounted\\" by Dec\'s reconciler engine,\\ncreating/destoying/modifying these real instances automatically as needed.\\n\\n*(Constructed via [Dec.New], [Dec.Premade], and [Dec.Clone])*","source":{"line":74,"path":"src/VirtualInstance.luau"}}')}}]);