"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1123],{81670:e=>{e.exports=JSON.parse('{"functions":[{"name":"Start","desc":"Starts the Timer Observable. The observable will update with new\\nvalues every heartbeat in real-time until it is stopped.","params":[],"returns":[],"function_type":"method","source":{"line":23,"path":"src/Observables/BaseTimer.luau"}},{"name":"Stop","desc":"Stops the Timer Observable, reseting the remaining time.","params":[],"returns":[],"function_type":"method","source":{"line":42,"path":"src/Observables/BaseTimer.luau"}},{"name":"Pause","desc":"Pauses the Timer Observable at its current remaining time position.","params":[],"returns":[],"function_type":"method","source":{"line":60,"path":"src/Observables/BaseTimer.luau"}},{"name":"Pause","desc":"Sets the current remaining time of the Timer.","params":[],"returns":[],"function_type":"method","source":{"line":88,"path":"src/Observables/BaseTimer.luau"}},{"name":"CurvedAlpha","desc":"Creates a new Alpha Observable that interpolates between 0 and one using\\nthe given easing style and direction. Useful for creating non-linear\\nanimations.","params":[],"returns":[{"desc":"","lua_type":"Alpha"}],"function_type":"method","source":{"line":125,"path":"src/Observables/BaseTimer.luau"}},{"name":"SliceAlpha","desc":"Creates a new Alpha Observable that starts at startTime\\n(maps to 0) and ends at endTime (maps to 1).\\n\\nUseful for slicing up animation sequences into smaller slices.","params":[],"returns":[{"desc":"","lua_type":"Alpha"}],"function_type":"method","source":{"line":157,"path":"src/Observables/BaseTimer.luau"}},{"name":"Alpha","desc":"Derives an Alpha observable object that maps the current remaining time from\\n0 (start) to 1 (finish)","params":[],"returns":[{"desc":"","lua_type":"Alpha"}],"function_type":"method","source":{"line":56,"path":"src/Observables/Timer.luau"}},{"name":"SetDuration","desc":"Sets the duration of the Timer.","params":[{"name":"duration","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":67,"path":"src/Observables/Timer.luau"}},{"name":"Lerp","desc":"Creates an observable that outputs an interpolated value between\\nthe start value and end value based on the current remaining time.","params":[],"returns":[{"desc":"","lua_type":"Observable<T>"}],"function_type":"method","source":{"line":79,"path":"src/Observables/Timer.luau"}}],"properties":[],"types":[],"name":"Timer","desc":"#### Inherits [Observable]\\n\\nObservable which counts down from a max value in realtime whenever played\\nvia [Timer:Start].\\n\\nIncludes utility methods for mapping this \\"remaining time\\" value into more\\ncomplex animationed sequences.\\n\\n*(Constructed via [Dec.Timer])*","tags":["Observable"],"source":{"line":29,"path":"src/Observables/Timer.luau"}}')}}]);