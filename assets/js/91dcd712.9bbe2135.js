"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[413],{10329:e=>{e.exports=JSON.parse('{"functions":[{"name":"Current","desc":"Returns the current value of the Observable.","params":[],"returns":[{"desc":"","lua_type":"T"}],"function_type":"method","source":{"line":69,"path":"src/Observables/Observable.luau"}},{"name":"Map","desc":"Creates a new Observable that emits the values from the original Observable\\nmapped by the provided function.","params":[{"name":"mappingFunction","desc":"","lua_type":"(value: T) -> any"}],"returns":[{"desc":"","lua_type":"Observable<any>"}],"function_type":"method","source":{"line":86,"path":"src/Observables/Observable.luau"}},{"name":"Subscribe","desc":"Subscribes to changes in the Observable. Returns a function that, when\\ncalled, will unsubscribe the callback from the Observable updates. If `true`\\nis provided as a second argument, will also call the callback once\\nimmediately with the current value.\\n\\nWARNING: Make sure you handle the Unsubscribe function whenever a calling\\nSubscribe! Observables do not garbage collect until all external listeners\\nare unsubscribed.","params":[{"name":"listener","desc":"","lua_type":"(value: T) -> ()"},{"name":"immediatelyCallListener","desc":"","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"() -> ()"}],"function_type":"method","source":{"line":112,"path":"src/Observables/Observable.luau"}},{"name":"Destroy","desc":"Destroys the Observable, releasing all its resources and unsubscribing all\\nlisteners.","params":[],"returns":[],"function_type":"method","source":{"line":147,"path":"src/Observables/Observable.luau"}}],"properties":[],"types":[],"name":"Observable","desc":"Observables are objects that hold or derive some state, and forward updates\\nto listeners of this state when subscribed.\\nCan be constructed via [Dec.CustomObservable]","source":{"line":13,"path":"src/Observables/Observable.luau"}}')}}]);